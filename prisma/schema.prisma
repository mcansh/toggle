// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  username       String   @unique
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  // Teams you've created and _last_ updated
  createdFlags Flag[] @relation(name: "createdByUser")
  updatedFlags Flag[] @relation(name: "lastUpdatedByUser")

  // Teams you belong to
  teams Team[]

  // Password reset fields
  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  // Teams you've created - allows for only creator to delete the team
  createdTeams Team[] @relation("teamCreatedBy")
}

model Team {
  id           String   @id @default(cuid())
  name         String   @unique
  slug         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  accessTokens String[] @unique

  // Users in the team
  members         User[]
  // Feature Channels in the team
  featureChannels FeatureChannel[]

  // Who created the team
  createdBy       User   @relation(name: "teamCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String
}

enum FlagType {
  string
  boolean
  number
}

model Flag {
  id        String   @id @default(cuid())
  feature   String   @unique
  type      FlagType
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relate a flag to it's creator
  createdBy User   @relation(name: "createdByUser", fields: [userId], references: [id])
  userId    String

  // Relate a flag to the last person who updated it
  lastUpdatedBy     User   @relation(name: "lastUpdatedByUser", fields: [lastUpdatedByUser], references: [id])
  lastUpdatedByUser String

  // Make flags unique per team
  featureChannel   FeatureChannel @relation(fields: [featureChannelId], references: [id])
  featureChannelId String

  @@unique([feature, featureChannelId], name: "UniqueFlagNamePerChannel")
}

model FeatureChannel {
  id        String   @id @default(cuid())
  name      String
  flags     Flag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  slug      String

  @@unique([name, teamId], name: "UniqueFeatureChannelNamePerTeam")
  @@unique([slug, teamId], name: "UniqueFeatureChannelSlugPerTeam")
}
